title: Requests

h3. An abstract notion of files: requests


The request is an abstract notion of file which can be conveniently used for defining powerful sources. A request can denote a local file, a remote file, or even a dynamically generated file. They are resolved to a local file thanks to a set of _protocols_. Then, audio requests are transparently decoded thanks to a set of audio and metadata _formats_.

The systematic use of requests to access files allows you to use remote URIs instead of local paths everywhere. It is perfectly OK to create a playlist for a remote list containing remote URIs: <code>playlist("http://my/friends/playlist.pls")</code>.

h4. The resolution process


The nice thing about resolution is that it is recursive and supports backtracking. An URI can be changed into a list of new ones, which are in turn resolved. The process succeeds if some valid local file appears at some point. If it doesn't succeed on one branch then it goes back to another branch. A typical complex resolution would be:

* <code>bubble:artist="bodom"</code>
** <code>ftp://no/where</code>
*** <code>Error</code>
** <code>ftp://some/valid.ogg</code>
*** <code>/tmp/success.ogg</code>

On top of that, metadata is extracted at every step in the branch. Usually, only the final local file yields interesting metadata (artist,album,...). But metadata can also be the nickname of the user who requested the song, set using the <code>annotate</code> protocol.

At the end of the resolution process, if the request is an audio one, liquidsoap check that the file is decodable: there should be a valid decoder for it (this isn't based on the extension but on the success of a format decoder), the decoder shouldn't yield an empty stream, and opening the decoder should be fast (less than 0.5 seconds), so that the opening of the audio file for its real playing in the main thread doesn't freeze it for too long.

h4. Currently supported protocols


*  SMB, FTP and HTTP using ufetch (provided by our ocaml-fetch distribution)
*  HTTP, HTTPS, FTP thanks to wget
*  SAY for speech synthesis (requires festival): <code>say:I am a robot</code> resolves to the WAV file resulting from the synthesis.
*  TIME for speech synthesis of the current time: <code>time: It is exactly $(time), and you're still listening.</code>
*  ANNOTATE for manually setting metadata, typically used in <code>annotate:nick="alice",message="for bob":/some/track/uri</code>
The extra metadata can then be synthesized in the audio stream, or merged into the standard metadata fields, or used on a rich web interface...
It is also possible to add a new protocol from the script, as it is done with "bubble":bubble.html for getting songs from a database query.

h4. Currently supported formats

* MPEG-1 Layer II (MP2) and Layer III (MP3) through libmad and @ocaml-mad@
* Ogg Vorbis through libvorbis and @ocaml-vorbis@
* WAV
* AAC
* and much more through external decoders!
